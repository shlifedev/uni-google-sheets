CnVzaW5nIFVuaXR5RW5naW5lOwp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnM7CnVzaW5nIFN5c3RlbS5JTzsKdXNpbmcgU3lzdGVtLkxpbnE7CnVzaW5nIFN5c3RlbTsKCm5hbWVzcGFjZSBVR1MuVW51c2VkCnsKICAgIHB1YmxpYyBlbnVtIFN0YXR1cwogICAgewogICAgICAgIE5vbmUsCiAgICAgICAgLy8vIDxzdW1tYXJ5PgogICAgICAgIC8vLyDstZzsi6DrsoTsoIQKICAgICAgICAvLy8gPC9zdW1tYXJ5PgogICAgICAgIExhdGVzdCwKICAgICAgICAvLy8gPHN1bW1hcnk + CiAgICAgICAgLy8vIOuLpOyatOuhnOuTnCDsi6TtjKgKICAgICAgICAvLy8gPC9zdW1tYXJ5PgogICAgICAgIEZhaWxlZCwKICAgICAgICAvLy8gPHN1bW1hcnk + CiAgICAgICAgLy8vIO2MqOy5mOqwgCDtlYTsmpTtlZzqsr3smrAKICAgICAgICAvLy8gPC9zdW1tYXJ5PgogICAgICAgIFBhdGNoCiAgICB9CiAgICAgCiAgICBwdWJsaWMgc3RhdGljIGNsYXNzIFZlcnNpb25NYW5hZ2VyCiAgICB7CiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgc3RyaW5nIFZlcnNpb25QYXRoID0 + IEFwcGxpY2F0aW9uLnBlcnNpc3RlbnREYXRhUGF0aCArICIvdWdzIjsKICAgICAgICBwcml2YXRlIHN0YXRpYyBib29sIHVzZUNETjsKICAgICAgICAgCiAgICAgICAgLy8vIDxzdW1tYXJ5PgogICAgICAgIC8vLyBGYWxzZeyduOqyveyasCDquLDsobQgUmVzb3VyY2VzLkxvYWQg67Cp7IudIOyCrOyaqQogICAgICAgIC8vLyA8L3N1bW1hcnk + CiAgICAgICAgLy8vIDxyZXR1cm5zPjwvcmV0dXJucz4KICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgSXNFbmFibGVkKCkKICAgICAgICB7CiAgICAgICAgICAgIHJldHVybiB1c2VDRE47CiAgICAgICAgfQoKICAgICAgICAvLy8gPHN1bW1hcnk + CiAgICAgICAgLy8vIOuyhOyghCDrp6Tri4jsp5Ug7Zmc7ISx7ZmULCBBcHBsaWNhdGlvbi5wZXJzaXN0ZW50RGF0YVBhdGgvdWdzL2RhdGEg6rK966Gc7JeQ7IScIOuNsOydtO2EsCDsnb3snYwKICAgICAgICAvLy8gPC9zdW1tYXJ5PgogICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBFbmFibGUoKQogICAgICAgIHsKICAgICAgICAgICAgdXNlQ0ROID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIC8vLyA8c3VtbWFyeT4KICAgICAgICAvLy8g67KE7KCEIOunpOuLiOynlSDtmZzshLHtmZQsIFJlc291cmNlcyDqsr3roZzsl5DshJwg642w7J207YSwIOydveydjAogICAgICAgIC8vLyA8L3N1bW1hcnk + CiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIERpc2FibGUoKQogICAgICAgIHsKICAgICAgICAgICAgdXNlQ0ROID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIC8vLyA8c3VtbWFyeT4KICAgICAgICAvLy8g7ZiE7J6sIOq4sOq4sOyXkOyEnCDtmZXsnbjrkJjripQg6rKM7J6EIOuNsOydtO2EsCDrsoTsoITsnYQg6rCA7KC47Ji164uI64ukLgogICAgICAgIC8vLyDrsoTsoIQg7KCV67O06rCAIOyXhuuKlOqyveyasCDruYTslrTsnojripQg7Iqk7Yq466eBIOumrO2EtAogICAgICAgIC8vLyA8L3N1bW1hcnk + CiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgR2V0TG9jYWxWZXJzaW9uCiAgICAgICAgewogICAgICAgICAgICBnZXQKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdmFyIGZpbGVQYXRoID0gU3lzdGVtLklPLlBhdGguQ29tYmluZShWZXJzaW9uUGF0aCwgInZlcnNpb24udHh0Iik7CiAgICAgICAgICAgICAgICByZXR1cm4gU3lzdGVtLklPLkZpbGUuRXhpc3RzKGZpbGVQYXRoKSA / IFN5c3RlbS5JTy5GaWxlLlJlYWRBbGxUZXh0KGZpbGVQYXRoKSA6IHN0cmluZy5FbXB0eTsgCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vLyA8c3VtbWFyeT4KICAgICAgICAvLy8gUzPsnLzroZzrtoDthLAg67KE7KCE7JeQIO2VtOuLue2VmOuKlCDrqqjrk6Ag642w7J207YSw7YyM7J287J2EIOqwgOyguOyYteuLiOuLpC4KICAgICAgICAvLy8gPC9zdW1tYXJ5PgogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0idmVyc2lvbiI + 64uk7Jq066Gc65OcIOuwm + ydhCDrsoTsoIQ8L3BhcmFtPgogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iY2FsbGJhY2siPuuLpOyatOuhnOuTnCDqsrDqs7zsl5Ag65Sw66W4IOy9nOuwsTwvcGFyYW0 + CiAgICAgICAgLy8vIDxyZXR1cm5zPjwvcmV0dXJucz4KICAgICAgICBwdWJsaWMgc3RhdGljIElFbnVtZXJhdG9yIERvd25sb2FkRnJvbVMzKHN0cmluZyB2ZXJzaW9uLCBTeXN0ZW0uQWN0aW9uPERvd25sb2FkUmVzdWx0PiBjYWxsYmFjaykKICAgICAgICB7CiAgICAgICAgICAgIERlbGV0ZUFsbERhdGEoKTsKCiAgICAgICAgICAgIFVHU2V0dGluZ09iamVjdCBzZXR0aW5nID0gUmVzb3VyY2VzLkxvYWQ8VUdTZXR0aW5nT2JqZWN0PigiVUdTZXR0aW5nT2JqZWN0Iik7CiAgICAgICAgICAgIHZhciBtZXRhVXJsID0gUGF0aC5Db21iaW5lKHNldHRpbmcuQ0ROX1VSTCwgdmVyc2lvbiwgIm1ldGEuYmluIik7CiAgICAgICAgICAgIFVuaXR5RW5naW5lLk5ldHdvcmtpbmcuVW5pdHlXZWJSZXF1ZXN0IHJlcU1ldGFkYXRhID0gbmV3IFVuaXR5RW5naW5lLk5ldHdvcmtpbmcuVW5pdHlXZWJSZXF1ZXN0KG1ldGFVcmwsICJHRVQiKTsKICAgICAgICAgICAgcmVxTWV0YWRhdGEuZG93bmxvYWRIYW5kbGVyID0gKFVuaXR5RW5naW5lLk5ldHdvcmtpbmcuRG93bmxvYWRIYW5kbGVyKW5ldyBVbml0eUVuZ2luZS5OZXR3b3JraW5nLkRvd25sb2FkSGFuZGxlckJ1ZmZlcigpOwogICAgICAgICAgICByZXFNZXRhZGF0YS50aW1lb3V0ID0gNTAwMDsKCiAgICAgICAgICAgIHlpZWxkIHJldHVybiByZXFNZXRhZGF0YS5TZW5kV2ViUmVxdWVzdCgpOwoKICAgICAgICAgICAgLy8g7Iqk7Yq466a8IOyTsOq4sAogICAgICAgICAgICBTeXN0ZW0uSU8uRmlsZUluZm8gbWV0YUZpbGUgPSBuZXcgU3lzdGVtLklPLkZpbGVJbmZvKFBhdGguQ29tYmluZShWZXJzaW9uUGF0aCwgImRhdGEiLCAibWV0YS5iaW4iKSk7CiAgICAgICAgICAgIG1ldGFGaWxlLkRpcmVjdG9yeS5DcmVhdGUoKTsKCgoKICAgICAgICAgICAgdXNpbmcgKEZpbGVTdHJlYW0gZnMgPSBtZXRhRmlsZS5PcGVuV3JpdGUoKSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZnMuRmx1c2goKTsKICAgICAgICAgICAgICAgIGZzLldyaXRlKFN5c3RlbS5UZXh0LkVuY29kaW5nLlVURjguR2V0Qnl0ZXMocmVxTWV0YWRhdGEuZG93bmxvYWRIYW5kbGVyLnRleHQpKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHJlcU1ldGFkYXRhLnJlc3VsdCA9PSBVbml0eUVuZ2luZS5OZXR3b3JraW5nLlVuaXR5V2ViUmVxdWVzdC5SZXN1bHQuU3VjY2VzcykKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdmFyIGRlY29kZWQgPSBVR1MuVW51c2VkLkJhc2U2NFV0aWxzLkRlY29kZShyZXFNZXRhZGF0YS5kb3dubG9hZEhhbmRsZXIudGV4dCk7CiAgICAgICAgICAgICAgICB2YXIgZmlsZVVybHMgPSBkZWNvZGVkLlNwbGl0KCcsJykuVG9MaXN0KCkuU2VsZWN0KHggPT4gUGF0aC5Db21iaW5lKHNldHRpbmcuQ0ROX1VSTCwgdmVyc2lvbiwgeCArICIuanNvbiIpKTsKICAgICAgICAgICAgICAgIHZhciBsb2NhbEZpbGVQYXRocyA9IGRlY29kZWQuU3BsaXQoJywnKS5Ub0xpc3QoKS5TZWxlY3QoeCA9PiBQYXRoLkNvbWJpbmUoVmVyc2lvblBhdGgsICJkYXRhIiwgeCArICIuanNvbiIpKS5Ub0xpc3QoKTsKICAgICAgICAgICAgICAgIHZhciBkb3dubG9hZGVkQWxsID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHZhciBpZHggPSAwOwogICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIGRvd25sb2FkVXJsIGluIGZpbGVVcmxzKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIFVuaXR5RW5naW5lLk5ldHdvcmtpbmcuVW5pdHlXZWJSZXF1ZXN0IHJlcUZpbGUgPSBuZXcgVW5pdHlFbmdpbmUuTmV0d29ya2luZy5Vbml0eVdlYlJlcXVlc3QoZG93bmxvYWRVcmwsICJHRVQiKTsKICAgICAgICAgICAgICAgICAgICByZXFGaWxlLmRvd25sb2FkSGFuZGxlciA9IChVbml0eUVuZ2luZS5OZXR3b3JraW5nLkRvd25sb2FkSGFuZGxlciluZXcgVW5pdHlFbmdpbmUuTmV0d29ya2luZy5Eb3dubG9hZEhhbmRsZXJCdWZmZXIoKTsKICAgICAgICAgICAgICAgICAgICB5aWVsZCByZXR1cm4gcmVxRmlsZS5TZW5kV2ViUmVxdWVzdCgpOwoKICAgICAgICAgICAgICAgICAgICAvLyDrhKTtirjsm4ztgawsIOyEuO2MhSDsnbTsiojrk7HsnLzroZwg7Jik66WYIOuwnOyDnQogICAgICAgICAgICAgICAgICAgIGlmIChyZXFGaWxlLnJlc3VsdCAhPSBVbml0eUVuZ2luZS5OZXR3b3JraW5nLlVuaXR5V2ViUmVxdWVzdC5SZXN1bHQuU3VjY2VzcykKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrPy5JbnZva2UobmV3IERvd25sb2FkUmVzdWx0KGZhbHNlLCByZXFGaWxlLmVycm9yLCByZXFGaWxlLnJlc3BvbnNlQ29kZSkpOwogICAgICAgICAgICAgICAgICAgICAgICBkb3dubG9hZGVkQWxsID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBTeXN0ZW0uSU8uRmlsZUluZm8gZGF0YUZpbGUgPSBuZXcgU3lzdGVtLklPLkZpbGVJbmZvKGxvY2FsRmlsZVBhdGhzW2lkeF0pOwogICAgICAgICAgICAgICAgICAgICAgICBkYXRhRmlsZS5EaXJlY3RvcnkuQ3JlYXRlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHVzaW5nIChGaWxlU3RyZWFtIGZzID0gZGF0YUZpbGUuT3BlbldyaXRlKCkpCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZzLkZsdXNoKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcy5Xcml0ZShTeXN0ZW0uVGV4dC5FbmNvZGluZy5VVEY4LkdldEJ5dGVzKHJlcUZpbGUuZG93bmxvYWRIYW5kbGVyLnRleHQpKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZHgrKzsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyDsmKTrpZgg7JeG7J20IOuqqOuToCDtjIzsnbzrk6TsnbQg64uk7Jq066Gc65OcIOuQnCDqsr3smrAKICAgICAgICAgICAgICAgIGlmIChkb3dubG9hZGVkQWxsKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIC8vIOuyhOyghOydhCDquLDroZ0KICAgICAgICAgICAgICAgICAgICBTeXN0ZW0uSU8uRmlsZS5Xcml0ZUFsbFRleHQoUGF0aC5Db21iaW5lKFZlcnNpb25QYXRoLCAidmVyc2lvbi50eHQiKSwgdmVyc2lvbik7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s / Lkludm9rZShuZXcgRG93bmxvYWRSZXN1bHQodHJ1ZSwgIuuLpOyatOuhnOuTnCDsmYTro4wgPT4gIiArIHN0cmluZy5Kb2luKCcsJywgZmlsZVVybHMpLCAyMDApKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGNhbGxiYWNrPy5JbnZva2UobmV3IERvd25sb2FkUmVzdWx0KGZhbHNlLCByZXFNZXRhZGF0YS5lcnJvciwgcmVxTWV0YWRhdGEucmVzcG9uc2VDb2RlKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHByaXZhdGUgc3RhdGljIHZvaWQgRGVsZXRlQWxsRGF0YSgpCiAgICAgICAgewoKICAgICAgICAgICAgdmFyIGRpID0gbmV3IERpcmVjdG9yeUluZm8oUGF0aC5Db21iaW5lKFZlcnNpb25QYXRoLCAiZGF0YSIpKTsKICAgICAgICAgICAgaWYgKGRpICE9IG51bGwgJiYgZGkuRXhpc3RzKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBkaS5HZXRGaWxlcygpLlRvTGlzdCgpLkZvckVhY2goeCA9PiB7CiAgICAgICAgICAgICAgICAgICAgeC5EZWxldGUoKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IAogICAgICAgICAgICBpZihkaSAhPSBudWxsICYmIGRpLkV4aXN0cykKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZGkuRGVsZXRlKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vLyA8c3VtbWFyeT4gCiAgICAgICAgLy8vIEFwcGxpY2F0aW9uLnBlcnNpc3RlbnREYXRhUGF0aC91Z3MvZGF0YSDqsr3roZzsl5Ag642w7J207YSw6rCAIOygleyDgeyggeycvOuhnCDsobTsnqztlZjripTsp4Ag7ZmV7J24LgogICAgICAgIC8vLyDsnKDsoIDqsIAg66Gc7Lus642w7J207YSw7JeQIOygkeq3vO2VtOyEnCDsiJjrj5nsnLzroZwg7Y + 0642U66W8IOyCreygnO2WiOydhCDqsr3smrDsl5Ag7JiI7Jm47LKY66asIO2VmOq4sOychO2VnCDtlajsiJjsnoXri4jri6QuCiAgICAgICAgLy8vIGZhbHNl6rCAIOumrO2EtOuQnOqyveyasCDsnbzrsJjsoIHsnLzroZwg642w7J207YSw66W8IOuLpOyatOuhnOuTnCDtlbTslbztlZjrr4DroZwgRG93bmxvYWRGcm9tUzMg7ZWo7IiY66W8IOyLpO2Wie2VmOuptCDrkKnri4jri6QuCiAgICAgICAgLy8vIDwvc3VtbWFyeT4gCiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIElzVmFsaWQoKQogICAgICAgIHsKICAgICAgICAgICAgdHJ5CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHZhciBkaSA9IG5ldyBEaXJlY3RvcnlJbmZvKFBhdGguQ29tYmluZShWZXJzaW9uUGF0aCwgImRhdGEiKSk7CiAgICAgICAgICAgICAgICB2YXIgdmVyc2lvbkZpbGUgPSBuZXcgRmlsZUluZm8oUGF0aC5Db21iaW5lKFZlcnNpb25QYXRoLCAidmVyc2lvbi50eHQiKSk7CiAgICAgICAgICAgICAgICAvLyDtj7TrjZTqsIAg7KG07J6s7ZWY64qU7KeA67aA7YSwIO2ZleyduAogICAgICAgICAgICAgICAgaWYgKCFkaS5FeGlzdHMpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgRGVidWcuTG9nRXJyb3IoIltWZXJzaW9uIENoZWNrZXJdIGRhdGEg7Y + 0642U6rCAIOyhtOyerO2VmOyngCDslYrsnYwiKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHZlcnNpb25GaWxlID09IG51bGwgfHwgIXZlcnNpb25GaWxlLkV4aXN0cykKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBEZWJ1Zy5Mb2dFcnJvcigiW1ZlcnNpb24gQ2hlY2tlcl0g66Gc7LusIOuyhOyghCDtjIzsnbzsnbQg7KG07J6s7ZWY7KeAIOyViuydjCIpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KCgoKICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGkuR2V0RmlsZXMoIiouYmluIikuVG9MaXN0KCkuRmluZCh4ID0 + IHguTmFtZS5Db250YWlucygibWV0YSIpKTsKICAgICAgICAgICAgICAgIC8vIO2PtOuNlOyViOyXkCBtZXRhLmJpbiDtmZXsnbgKICAgICAgICAgICAgICAgIGlmIChtZXRhID09IG51bGwgfHwgIW1ldGEuRXhpc3RzKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIERlYnVnLkxvZ0Vycm9yKCJbVmVyc2lvbiBDaGVja2VyXSDrqZTtg4DrjbDsnbTthLAg7KG07J6s7ZWY7KeAIOyViuydjCAiKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8g642w7J207YSwIO2MjOydvOumrOyKpO2KuCAKICAgICAgICAgICAgICAgIHZhciBkYXRhRmlsZXMgPSBkaS5HZXRGaWxlcygiKi5qc29uIikuVG9MaXN0KCk7CgogICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBVR1MuVW51c2VkLkJhc2U2NFV0aWxzLkRlY29kZShTeXN0ZW0uSU8uRmlsZS5SZWFkQWxsVGV4dChtZXRhLkZ1bGxOYW1lKSk7CiAgICAgICAgICAgICAgICB2YXIgZmlsZXMgPSBjb250ZW50LlNwbGl0KCIsIik7CgogICAgICAgICAgICAgICAgaWYgKGRhdGFGaWxlcy5Db3VudCAhPSBmaWxlcy5MZW5ndGgpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgRGVidWcuTG9nRXJyb3IoIltWZXJzaW9uIENoZWNrZXJdIO2MjOydvCDqsJzsiJgg7Jyg7Zqo7ISxIOqygOyCrCDsi6TtjKggIik7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIGZpbGUgaW4gZmlsZXMpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFGaWxlID0gbmV3IEZpbGVJbmZvKFBhdGguQ29tYmluZShWZXJzaW9uUGF0aCwgImRhdGEiLCBmaWxlICsgIi5qc29uIikpOwogICAgICAgICAgICAgICAgICAgIGlmICghZGF0YUZpbGUuRXhpc3RzKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcuTG9nRXJyb3IoIltWZXJzaW9uIENoZWNrZXJdIOuNsOydtO2EsCDtjIzsnbwg7Jyg7Zqo7ISxIOqygOyCrCDsi6TtjKgsICIgKyBkYXRhRmlsZS5GdWxsTmFtZSArICIg7YyM7J287J20IOyhtOyerO2VmOyngCDslYrsnYwiKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaChFeGNlcHRpb24gZSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgRGVidWcuTG9nRXJyb3IoZS5NZXNzYWdlKTsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKCiAgICAgICAgLy8vIDxzdW1tYXJ5PgogICAgICAgIC8vLyDrk7HroZ3tlZwgczMgdXJs66Gc67aA7YSwIOuyhOyghOyytO2BrAogICAgICAgIC8vLyDsvZzrsLEgVmVyc2lvbkNoZWNrUmVzdWx0IOyXkOyEnCDtjKjsuZgg7ZWE7JqUIOyXrOu2gOyXkCDrjIDtlbQg7JWMIOyImCDsnojsnYwuCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJjYWxsYmFjayI + 67KE7KCEIOyytO2BrCDsmpTssq3sl5DrjIDtlZwg7L2c67CxPC9wYXLjhY5hbT4KICAgICAgICBwdWJsaWMgc3RhdGljIElFbnVtZXJhdG9yIENoZWNrVmVyc2lvbihTeXN0ZW0uQWN0aW9uPFZlcnNpb25DaGVja1Jlc3VsdD4gY2FsbGJhY2spCiAgICAgICAgewogICAgICAgICAgICBVR1NldHRpbmdPYmplY3Qgc2V0dGluZyA9IFJlc291cmNlcy5Mb2FkPFVHU2V0dGluZ09iamVjdD4oIlVHU2V0dGluZ09iamVjdCIpOwoKICAgICAgICAgICAgLy8g7KCA7J6lIOqyveuhnCDsg53shLEKICAgICAgICAgICAgaWYgKCFTeXN0ZW0uSU8uRGlyZWN0b3J5LkV4aXN0cyhWZXJzaW9uUGF0aCkpCiAgICAgICAgICAgICAgICBTeXN0ZW0uSU8uRGlyZWN0b3J5LkNyZWF0ZURpcmVjdG9yeShWZXJzaW9uUGF0aCk7CgogICAgICAgICAgICAvLyDsm5Dqsqkg67KE7KCE642w7J207YSwIOqyveuhnAogICAgICAgICAgICB2YXIgdXJsID0gU3lzdGVtLklPLlBhdGguQ29tYmluZShzZXR0aW5nLkNETl9VUkwsICJ2ZXJzaW9uLnR4dCIpOwogICAgICAgICAgICAvLyDrsoTsoITrjbDsnbTthLAg7KCA7J6lIOqyveuhnAogICAgICAgICAgICB2YXIgZmlsZVBhdGggPSBTeXN0ZW0uSU8uUGF0aC5Db21iaW5lKFZlcnNpb25QYXRoLCAidmVyc2lvbi50eHQiKTsKCiAgICAgICAgICAgIC8vIOuyhOyghOuNsOydtO2EsOqwgCDsl4bripTqsr3smrAgdGVtcCDtjIzsnbwg7IOd7ISxCiAgICAgICAgICAgIGlmICghU3lzdGVtLklPLkZpbGUuRXhpc3RzKGZpbGVQYXRoKSkKICAgICAgICAgICAgICAgIFN5c3RlbS5JTy5GaWxlLldyaXRlQWxsVGV4dChmaWxlUGF0aCwgIiIpOwoKCiAgICAgICAgICAgIHZhciBsb2NhbFZlciA9IFN5c3RlbS5JTy5GaWxlLlJlYWRBbGxUZXh0KGZpbGVQYXRoKTsKICAgICAgICAgICAgVW5pdHlFbmdpbmUuTmV0d29ya2luZy5Vbml0eVdlYlJlcXVlc3QgcmVxID0gbmV3IFVuaXR5RW5naW5lLk5ldHdvcmtpbmcuVW5pdHlXZWJSZXF1ZXN0KHVybCwgIkdFVCIpOwogICAgICAgICAgICByZXEudGltZW91dCA9IDUwMDA7CiAgICAgICAgICAgIHJlcS5kb3dubG9hZEhhbmRsZXIgPSAoVW5pdHlFbmdpbmUuTmV0d29ya2luZy5Eb3dubG9hZEhhbmRsZXIpbmV3IFVuaXR5RW5naW5lLk5ldHdvcmtpbmcuRG93bmxvYWRIYW5kbGVyQnVmZmVyKCk7CiAgICAgICAgICAgIHlpZWxkIHJldHVybiByZXEuU2VuZFdlYlJlcXVlc3QoKTsKICAgICAgICAgICAgaWYgKHJlcS5yZXN1bHQgPT0gVW5pdHlFbmdpbmUuTmV0d29ya2luZy5Vbml0eVdlYlJlcXVlc3QuUmVzdWx0LlN1Y2Nlc3MpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHZhciByZXNWZXIgPSByZXEuZG93bmxvYWRIYW5kbGVyLnRleHQ7CiAgICAgICAgICAgICAgICBpZiAocmVzVmVyICE9IGxvY2FsVmVyKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIC8vU3lzdGVtLklPLkZpbGUuV3JpdGVBbGxUZXh0KGZpbGVQYXRoLCByZXNWZXIpOwogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrPy5JbnZva2UobmV3IFZlcnNpb25DaGVja1Jlc3VsdCgpCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gcmVzVmVyLAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSBTdGF0dXMuUGF0Y2gKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaz8uSW52b2tlKG5ldyBWZXJzaW9uQ2hlY2tSZXN1bHQoKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGxvY2FsVmVyLAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSBTdGF0dXMuTGF0ZXN0CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBjYWxsYmFjaz8uSW52b2tlKG5ldyBWZXJzaW9uQ2hlY2tSZXN1bHQoKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSByZXEuZXJyb3IsCiAgICAgICAgICAgICAgICAgICAgc3RhdHVzID0gU3RhdHVzLkZhaWxlZAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0K